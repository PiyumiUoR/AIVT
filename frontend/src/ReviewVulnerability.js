import React, { useState, useEffect } from 'react';
import { useParams, Link, useNavigate } from 'react-router-dom';
import './VulnerabilityDetails.css';
import Footer from './Footer';

const ReviewVulnerability = () => {
  const { id } = useParams();
  const [vulnerability, setVulnerability] = useState(null);
  const [newComment, setNewComment] = useState('');
  const navigate = useNavigate();

  useEffect(() => {
    fetch(`/api/vulnerabilities/${id}`)
      .then(response => response.json())
      .then(data => {
        console.log(data);
        setVulnerability(data);
    })
      .catch(error => console.error('Error fetching vulnerability details:', error));
  }, [id]);

  if (!vulnerability) {
    return <div>Loading...</div>;
  }

  const downloadAttachment = (reportId, filename) => {
    fetch(`/api/vulnerabilities/attachments/${reportId}/${filename}`)
      .then(response => {
        if (!response.ok) {
          throw new Error('Network response was not ok');
        }
        return response.blob();
      })
      .then(blob => {
        const url = window.URL.createObjectURL(blob);
        const link = document.createElement('a');
        link.href = url;
        link.download = filename;
        document.body.appendChild(link);
        link.click();
        document.body.removeChild(link);
      })
      .catch(error => console.error('Error downloading the file:', error));
  };

  const handleApprove = (id) => {
  console.log('Approving report with ID:', id);
  if (!id || typeof id !== 'number') {
    console.error('Error: Vulnerability report ID is missing or invalid');
    return;
  }

  const token = localStorage.getItem('token');

  fetch(`/api/vulnerabilities/${id}/review`, {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
      Authorization: `Bearer ${token}`,
    },
    body: JSON.stringify({ approval_status: 'approved', review_comments: newComment }),
  })
    .then((response) => {
      if (!response.ok) {
        throw new Error('Failed to approve the report');
      }
      console.log('Report approved successfully');
      navigate('/vulnerabilities/pending');
      // Optional: Refresh or update the state to reflect the approval
    })
    .catch((error) => console.error('Error approving report:', error));
};

const handleReject = (id) => {
    console.log('Approving report with ID:', id);
    if (!id || typeof id !== 'number') {
      console.error('Error: Vulnerability report ID is missing or invalid');
      return;
    }

  const token = localStorage.getItem('token');
  fetch(`/api/vulnerabilities/${id}/review`, {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
      Authorization: `Bearer ${token}`,
    },
    body: JSON.stringify({ approval_status: 'rejected', review_comments: newComment }),
  })
    .then((response) => {
      if (!response.ok) {
        throw new Error('Failed to reject the report');
      }
      console.log('Report rejected successfully');
      navigate('/vulnerabilities/pending');
    })
    .catch((error) => console.error('Error rejecting report:', error));
  };


  return (
    <div>
      <div className="vulnerability-details">
        <h1>{vulnerability.title}</h1>
        <table>
          <tbody>
            <tr>
              <th>Description</th>
              <td>{vulnerability.report_description}</td>
            </tr>
            <tr>
              <th>Artifact Name</th>
              <td>{vulnerability.artifactName}</td>
            </tr>
            <tr>
              <th>Reporter</th>
              <td>{vulnerability.reporterName} ({vulnerability.reporterEmail})</td>
            </tr>
            <tr>
              <th>Organization</th>
              <td>{vulnerability.reporterOrganization}</td>
            </tr>
            <tr>
              <th>Phase</th>
              <td>{vulnerability.phase}</td>
            </tr>
            <tr>
              <th>Phase Description</th>
              <td>{vulnerability.phaseDescription}</td>
            </tr>
            <tr>
              <th>Attributes</th>
              <td>{vulnerability.attributeName}</td>
            </tr>
            <tr>
              <th>Attribute Description</th>
              <td>{vulnerability.attr_Description}</td>
            </tr>
            <tr>
              <th>Effect</th>
              <td>{vulnerability.effectName}</td>
            </tr>
            <tr>
              <th>Effect Description</th>
              <td>{vulnerability.eff_Description}</td>
            </tr>
            {vulnerability.attachments && vulnerability.attachments.length > 0 && (
              <tr>
                <th>Attachments</th>
                <td>
                  {vulnerability.attachments.map((attachment, index) => (
                    <button key={index} onClick={() => downloadAttachment(vulnerability.id, attachment.filename)}>
                      Download {attachment.filename}
                    </button>
                  ))}
                </td>
              </tr>
            )}
            <tr>
              <th>Admin Comments</th>
                <td>
                <textarea
                value={newComment}
                className='comment-area'
                onChange={(e) => setNewComment(e.target.value)}
                placeholder="Add your comment here"
                required
                ></textarea>
                </td>
            </tr>
            <tr>
                <th>Actions</th>
                <td>
                {/* <button onClick={handleApprove} className="approve-button">Approve</button> */}
                <button onClick={() => handleApprove(vulnerability.id)} className='approve-button'>Approve</button>
                <button onClick={() => handleReject(vulnerability.id)} className="reject-button">Reject</button>

                </td>
            </tr>
          </tbody>
        </table>
        <div className="vulnerability-actions">
          <div className="left-action">
            <Link to="/vulnerabilities/">Back to Vulnerability List</Link>
          </div>
          <div className="right-actions">
            <Link to={`/vulnerabilities/${id}/edit/`}>Edit Details</Link>
            <span> | </span>
            <Link to={`/vulnerabilities/${id}/delete/`}>Delete</Link>
          </div>
        </div>
      </div>
      <Footer />
    </div>
  );
};

export default ReviewVulnerability;
