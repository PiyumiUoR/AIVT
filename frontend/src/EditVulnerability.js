import React, { useState, useEffect } from 'react';
import axios from 'axios';
import Select from 'react-select';
import { useParams, useNavigate } from 'react-router-dom';
import './ReportVulnerability.css';
import Footer from './Footer';

const attributeOptions = [
  { value: 'Accuracy', label: 'Accuracy' },
  { value: 'Fairness', label: 'Fairness' },
  { value: 'Privacy', label: 'Privacy' },
  { value: 'Reliability', label: 'Reliability' },
  { value: 'Resiliency', label: 'Resiliency' },
  { value: 'Robustness', label: 'Robustness' },
  { value: 'Safety', label: 'Safety' }
];

const EditVulnerability = () => {
  const { id } = useParams();
  const navigate = useNavigate();
  const [formData, setFormData] = useState({
    name: '',
    email: '',
    organization: '',
    title: '',
    report_description: '',
    artifactName: '',
    artifactType: '',
    developer: '',
    deployer: '',
    phase: '',
    phase_description: '',
    attributeName: [],
    attr_description: '',
    effectName: '',
    eff_description: '',
    attachments: [],
    existingAttachments: []
  });
  const [isAuthorized, setIsAuthorized] = useState(false);
  // const [loading, setLoading] = useState(true);

  useEffect(() => {
    const fetchVulnerabilityDetails = async () => {
      try {
        const response = await axios.get(`/api/vulnerabilities/${id}/`);
        const vulnerability = response.data;

        // console.log('Fetched Vulnerability:', vulnerability); // Check fetched data

        // Get current user details
        const currentUser = await axios.get('/api/auth/current-user', {
          headers: { 
            Authorization: `Bearer ${localStorage.getItem('token')}` 
          }
        });

        // Check if the current user is the owner
        if (vulnerability.reporterEmail === currentUser.data.email) {
          setIsAuthorized(true);
          setFormData({
            name: vulnerability.reporterName || '', 
            email: vulnerability.reporterEmail || '',
            organization: vulnerability.reporterOrganization || '',
            title: vulnerability.title || '',
            report_description: vulnerability.report_description || '',
            artifactName: vulnerability.artifactName || '',
            artifactType: vulnerability.artifactType || '',
            developer: vulnerability.developer || '',
            deployer: vulnerability.deployer || '',
            phase: vulnerability.phase || '',
            phase_description: vulnerability.phaseDescription || '',
            attributeName: vulnerability.attributeName
            ? vulnerability.attributeName.split(',').map(attr => ({
                value: attr.trim(),
                label: attr.trim()
            }))
            : [],
            attr_description: vulnerability.attr_Description || '',
            effectName: vulnerability.effectName || '',
            eff_description: vulnerability.eff_Description || '',
            attachments: [],
            existingAttachments: vulnerability.attachments || []
          });
        } else {
          setIsAuthorized(false);
          // console.error('Unauthorized attempt to edit vulnerability');
          alert('Unauthorized attempt to edit vulnerability. Please try again.');
          navigate(`/vulnerabilities/${id}`);
        }
        } catch (error) {
          console.error('Error fetching vulnerability details:', error);
        }
      };

      fetchVulnerabilityDetails();
    }, [id, navigate]);

  const handleChange = (e) => {
    const { name, value } = e.target;
    setFormData({ ...formData, [name]: value });
  };

  const handleFileChange = (e) => {
    setFormData({ ...formData, attachments: e.target.files });
  };  

  const handleAttributeChange = (selectedOptions) => {
    setFormData({ ...formData, attributeName: selectedOptions });
  };

  const handleDeleteExistingFile = (index) => {
    setFormData((prevData) => {
        const updatedFiles = [...prevData.existingAttachments];
        updatedFiles.splice(index, 1);  
        updatedFiles[index].delete = true;  
        return { ...prevData, existingAttachments: updatedFiles };
    });
};


  const handleSubmit = async (e) => {
    e.preventDefault();

    const data = new FormData();

    if (formData.title) {
        data.append('title', formData.title);
    }
    if (formData.report_description) {
        data.append('report_description', formData.report_description);
    }
    if (formData.phase_description) {
        data.append('phase_description', formData.phase_description);
    }
    if (formData.attr_description) {
        data.append('attr_description', formData.attr_description);
    }
    if (formData.eff_description) {
        data.append('eff_description', formData.eff_description);
    }

    // Handle deletions
    const filesToDelete = formData.existingAttachments
        .filter(file => file.delete)
        .map(file => file.filename);
    if (filesToDelete.length > 0) {
        data.append('deleteAttachments', JSON.stringify(filesToDelete));
        console.log(filesToDelete);
    }

    for (let i = 0; i < formData.attachments.length; i++) {
        data.append('attachments', formData.attachments[i]);
    }

    try {
      const response = await axios.put(`/api/vulnerabilities/${id}/edit`, data, {
          headers: {
              'Content-Type': 'multipart/form-data',
              Authorization: `Bearer ${localStorage.getItem('token')}`
          }
      });
      console.log('Update Response:', response.data);
      navigate(`/vulnerabilities/${id}`);
    } catch (error) {
      console.error('Error updating vulnerability:', error);
      alert('An error occurred while updating the vulnerability. Please try again.');
      navigate(`/vulnerabilities/${id}`);
    }
  };
  // if (loading) return <p>Loading...</p>;

  if (!isAuthorized) {
    return <p>You are not authorized to edit this report.</p>;
  }

  return (
    <div>
      <div className="report-form-container">
        <h1>Edit Vulnerability Details</h1>
        <form onSubmit={handleSubmit} encType="multipart/form-data">
          {/* Form fields with values pre-filled from formData */}
          <h2>Reporter Information</h2>
          <div className="form-group">
            <label>Name</label>
            <input type="text" name="name" value={formData.name} onChange={handleChange} required className="non-editable"/>
          </div>
          <div className="form-group">
            <label>Email</label>
            <input type="email" name="email" value={formData.email} onChange={handleChange} required className="non-editable"/>
          </div>
          <div className="form-group">
            <label>Organization</label>
            <input type="text" name="organization" value={formData.organization} onChange={handleChange} className="non-editable"/>
          </div>

          <h2>Vulnerability Information</h2>
          <div className="form-group">
            <label>Title</label>
            <input type="text" name="title" value={formData.title} onChange={handleChange} required className="non-editable"/>
          </div>
          <div className="form-group">
            <label>Description</label>
            <textarea name="report_description" value={formData.report_description} onChange={handleChange} required />
          </div>

          <h2>Artifact Information</h2>
          <div className="form-group">
            <label>Artifact Name</label>
            <input type="text" name="artifactName" value={formData.artifactName} onChange={handleChange} className="non-editable"/>
          </div>
          <div className="form-group">
            <label>Artifact Description</label>
            <input type="text" name="artifactType" value={formData.artifactType} onChange={handleChange} className="non-editable"/>
          </div>
          <div className="form-group">
            <label>Developer</label>
            <input type="text" name="developer" value={formData.developer} onChange={handleChange} className="non-editable"/>
          </div>
          <div className="form-group">
            <label>Deployer</label>
            <input type="text" name="deployer" value={formData.deployer} onChange={handleChange} className="non-editable"/>
          </div>

          <h2>Vulnerability Phase</h2>
          <div className="form-group">
            <label>Phase
              <select name="phase" value={formData.phase} onChange={handleChange} required className="non-editable">
                <option value="Development">Development</option>
                <option value="Training">Training</option>
                <option value="Deployment and Use">Deployment and Use</option>
              </select>
            </label>
          </div>
          <div className="form-group">
            <label>Phase Description</label>
            <input type="text" name="phase_description" value={formData.phase_description} onChange={handleChange} />
          </div>

          <h2>Attributes</h2>
          <div className="form-group">
            <label>Attribute</label>
            <Select
              isMulti
              name="attributeName"
              options={attributeOptions}
            //   className="basic-multi-select"
              className="non-editable"
              classNamePrefix="select"
              value={formData.attributeName}
              onChange={handleAttributeChange}
            />
          </div>
          <div className="form-group">
            <label>Attribute Description</label>
            <input type="text" name="attr_description" value={formData.attr_description} onChange={handleChange} />
          </div>

          <h2>Effects</h2>
          <div className="form-group">
            <label>Effect
              <select name="effectName" value={formData.effectName} onChange={handleChange} required className="non-editable">
                <option value="0: Correct functioning">0: Correct functioning</option>
                <option value="1: Reduced functioning">1: Reduced functioning</option>
                <option value="2: No actions">2: No actions</option>
                <option value="3: Random actions">3: Random actions</option>
                <option value="4: Directed actions">4: Directed actions</option>
                <option value="5: Random actions OoB">5: Random actions OoB</option>
                <option value="6: Directed actions OoB">6: Directed actions OoB</option>
              </select>
            </label>
          </div>
          <div className="form-group">
            <label>Effect Description</label>
            <input type="text" name="eff_description" value={formData.eff_description} onChange={handleChange} />
          </div>

          <h2>Attachments</h2>
          <div className="form-group">
            <label>Existing Attachments</label>
            <div className="existing-files">
              {formData.existingAttachments.map((file, index) => (
                <div key={index} className="existing-file">
                  <span>{file.filename}</span> 

                  <button type="button" onClick={() => handleDeleteExistingFile(index)}>x</button>
                </div>
              ))}
            </div>
            <label>Upload New Attachments</label>
            <input type="file" multiple onChange={handleFileChange} />
          </div>

          <button type="submit">Update</button>
        </form>
      </div>
      <div>
        <Footer />
      </div>
    </div>
  );
}

export default EditVulnerability;
