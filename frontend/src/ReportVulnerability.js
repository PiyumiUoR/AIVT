import React, { useEffect, useState } from 'react';
import axios from 'axios';
import Select from 'react-select';
import './ReportVulnerability.css';
import Footer from './Footer';
import { useNavigate } from 'react-router-dom'
// import { useParams } from 'react-router-dom';

const attributeOptions = [
  { value: 'Accuracy', label: 'Accuracy' },
  { value: 'Fairness', label: 'Fairness' },
  { value: 'Privacy', label: 'Privacy' },
  { value: 'Reliability', label: 'Reliability' },
  { value: 'Resiliency', label: 'Resiliency' },
  { value: 'Robustness', label: 'Robustness' },
  { value: 'Safety', label: 'Safety' }
];

const ReportVulnerability = () => {
  const navigate = useNavigate();
  const [formData, setFormData] = useState({
    name: '',
    email: '',
    organization: '',
    title: '',
    report_description: '',
    artifactName: '',
    artifactType: '',
    developer: '',
    deployer: '',
    phase: '',
    phase_description: '',
    attributeName: [],
    attr_description: '',
    effectName: '',
    eff_description: '',
    attachments: []
  });

  useEffect(() => {
    axios.get('/api/auth/current-user', {
      headers: {
        Authorization: `Bearer ${localStorage.getItem('token')}` 
      }
    })
    .then(response => {
      const userData = response.data;
      setFormData(prevFormData => ({
        ...prevFormData,
        name: userData.name,
        email: userData.email,
        organization: userData.organization
      }));
    })
    .catch(error => {
      console.error('Error fetching user details:', error);
      alert('Unauthorized attempt to add a new vulnerability. Please log in first.');
      navigate('/login'); 
    });
  }, [navigate]);
  
  

  const handleChange = (e) => {
    const { name, value } = e.target;
    setFormData({ ...formData, [name]: value });
  };

  const handleFileChange = (e) => {
    const newFiles = Array.from(e.target.files);
    setFormData((prevData) => ({
      ...prevData,
      attachments: [...prevData.attachments, ...newFiles]
    }));
  };

  const handleDeleteFile = (index) => {
    setFormData((prevData) => {
      const updatedFiles = prevData.attachments.filter((_, i) => i !== index);
      return { ...prevData, attachments: updatedFiles };
    });
  };

  const handleAttributeChange = (selectedOptions) => {
    setFormData({ ...formData, attributeName: selectedOptions });
  };

  const handleSubmit = async (e) => {
    e.preventDefault();

    const data = new FormData();
    data.append('title', formData.title);
    data.append('report_description', formData.report_description);
    data.append('artifactName', formData.artifactName);
    data.append('artifactType', formData.artifactType);
    data.append('developer', formData.developer);
    data.append('deployer', formData.deployer);
    data.append('phase', formData.phase);
    data.append('phase_description', formData.phase_description);
    data.append('attributeName', formData.attributeName.map(attr => attr.value).join(','));
    data.append('attr_description', formData.attr_description);
    data.append('effectName', formData.effectName);
    data.append('eff_description', formData.eff_description);
    for (let i = 0; i < formData.attachments.length; i++) {
      data.append('attachments', formData.attachments[i]);
    }

    const headers = {
      'Content-Type': 'multipart/form-data',
      Authorization: `Bearer ${localStorage.getItem('token')}`
    };

    try {
      // console.log('Request Headers:', headers); 
      const response = await axios.post('/api/vulnerabilities', data, { headers });
      console.log(response.data);
      window.location.reload(); 
    } catch (error) {
      console.error(error);
    }
  };

  return (
    <div>
      <div className="report-form-container">
        <h1>Report a Vulnerability</h1>
        <form onSubmit={handleSubmit} encType="multipart/form-data">
          {/* Reporter Information */}
          <h2>Reporter Information</h2>
          <div className="form-group">
            <label>Name</label>
            <input type="text" name="name" value={formData.name} onChange={handleChange} className='non-editable' readOnly />
          </div>
          <div className="form-group">
            <label>Email</label>
            <input type="email" name="email" value={formData.email} onChange={handleChange} className='non-editable' readOnly />
          </div>
          <div className="form-group">
            <label>Organization</label>
            <input type="text" name="organization" value={formData.organization} onChange={handleChange} className='non-editable' readOnly/>
          </div>

          {/* Vulnerability Information */}
          <h2>Vulnerability Information</h2>
          <div className="form-group">
            <label>Title</label>
            <input type="text" name="title" value={formData.title} onChange={handleChange} required />
          </div>
          <div className="form-group">
            <label>Description</label>
            <textarea name="report_description" value={formData.report_description} onChange={handleChange} required />
          </div>

          {/* Artifact Information */}
          <h2>Artifact Information</h2>
          <div className="form-group">
            <label>Artifact Name</label>
            <input type="text" name="artifactName" value={formData.artifactName} onChange={handleChange} />
          </div>
          <div className="form-group">
            <label>Artifact Type</label>
            <input type="text" name="artifactType" value={formData.artifactType} onChange={handleChange} />
          </div>
          <div className="form-group">
            <label>Developer</label>
            <input type="text" name="developer" value={formData.developer} onChange={handleChange} />
          </div>
          <div className="form-group">
            <label>Deployer</label>
            <input type="text" name="deployer" value={formData.deployer} onChange={handleChange} />
          </div>

          {/* Vulnerability Phase */}
          <h2>Vulnerability Phase</h2>
          <div className="form-group">
            <label>Phase</label>
            <select name="phase" value={formData.phase} onChange={handleChange} required>
              {/* add as 'Select one' in label */}
              <option value="" disabled selected>Select one...</option>
              <option value="Development">Development</option>
              <option value="Training">Training</option>
              <option value="Deployment and Use">Deployment and Use</option>
            </select>
          </div>
          <div className="form-group">
            <label>Phase Description</label>
            <input type="text" name="phase_description" value={formData.phase_description} onChange={handleChange} />
          </div>

          {/* Attribute Information */}
          <h2>Attribute Information</h2>
          <div className="form-group">
            <label>Attributes</label>
            <Select
              isMulti
              name="attributeName"
              value={formData.attributeName}
              onChange={handleAttributeChange}
              options={attributeOptions}
              className="basic-multi-select"
              classNamePrefix="select"
            />
          </div>
          <div className="form-group">
            <label>Attribute Description</label>
            <textarea name="attr_description" value={formData.attr_description} onChange={handleChange} />
          </div>

          {/* Effect Information */}
          <h2>Effect Information</h2>
          <div className="form-group">
            <label>Effect</label>
            <select name="effectName" value={formData.effectName} onChange={handleChange} required >
              <option value="" disabled selected>Select one...</option>
              <option value='0: Correct functioning'>0: Correct functioning</option>
              <option value='1: Reduced functioning'>1: Reduced functioning</option>
              <option value='2: No actions'>2: No actions</option>
              <option value='3: Random actions'>3: Random actions</option>
              <option value='4: Directed actions'>4: Directed actions</option>
              <option value='5: Random actions OoB'>5: Random actions OoB</option>
              <option value='6: Directed actions OoB'>6: Directed actions OoB</option>
            </select>
          </div>
          <div className="form-group">
            <label>Effect Description</label>
            <textarea name="eff_description" value={formData.eff_description} onChange={handleChange} />
          </div>

          {/* Attachments */}
          <h2>Attachments</h2>
          <div className="form-group">
            <label>Uploaded Files</label>
            <div className="uploaded-files">
              {formData.attachments.map((file, index) => (
                <div key={index} className="uploaded-file">
                  <span>{file.name}</span>
                  <button type="button" onClick={() => handleDeleteFile(index)}>x</button>
                </div>
              ))}
            </div>
            <input type="file" multiple onChange={handleFileChange} />
          </div>

          <button type="submit" className="submit-button">Submit</button>
        </form>
      </div>
      <Footer />
    </div>
  );
};

export default ReportVulnerability;
