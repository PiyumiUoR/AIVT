import React, { useEffect, useState } from 'react';
import { useParams, useNavigate } from 'react-router-dom';
import axios from 'axios';

const DeleteVulnerability = () => {
  const { id } = useParams();
  const navigate = useNavigate();
  const [isDeleting, setIsDeleting] = useState(true); // Use state to handle deletion status

  useEffect(() => {
    const fetchVulnerabilityDetails = async () => {
      try {
        // Fetch vulnerability details
        const response = await axios.get(`/api/vulnerabilities/${id}/`);
        const vulnerability = response.data;

        console.log(vulnerability);

        // Fetch current user details
        const currentUserResponse = await axios.get('/api/auth/current-user', {
          headers: { Authorization: `Bearer ${localStorage.getItem('token')}` }
        });
        const currentUser = currentUserResponse.data;
        console.log(currentUser);

        // Check if the current user is authorized to delete the vulnerability
        if (vulnerability.reporterEmail === currentUser.email) {
          try {
            // Perform delete request
            await axios.delete(`/api/vulnerabilities/${id}/delete`, {
              headers: { Authorization: `Bearer ${localStorage.getItem('token')}` }
            });
            navigate('/vulnerabilities');
          } catch (deleteError) {
            console.error('Error deleting vulnerability:', deleteError);
            setIsDeleting(false); // Update state if there is an error
          }
        } else {
          // navigate('/vulnerabilities'); 
          alert('The user is not authorized. Please try again.');
          navigate(`/vulnerabilities/${id}`);
        }
      } catch (error) {
        console.error('Error fetching vulnerability details:', error);
        alert('An error occurred while deleting the vulnerability. Please try again.');
        navigate(`/vulnerabilities/${id}`);
      }
    };

    fetchVulnerabilityDetails();
  }, [id, navigate]);

  if (!isDeleting) return <p>Error occurred while deleting the report.</p>;

  return (
    <div>
      <p>Deleting vulnerability...</p>
    </div>
  );
};

export default DeleteVulnerability;
